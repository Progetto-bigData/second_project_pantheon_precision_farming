version: '3'
services:

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: always


  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    depends_on:
      - "zookeeper"
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "test:1:1, humidity-sensor:5:1, pressure-sensor:5:1, rain-sensor:5:1, solar-sensor:5:1, soil-temperature-sensor:5:1, soil-water-sensor:5:1, temperature-sensor:5:1, wind-sensor:5:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
      
  #This commented service has only testing purposes
  #dummy-producer:
    #build: 
      #context: ./iot-sensor-producer
      #dockerfile: dummy-producer.df
    #container_name: dummy-producer
    #depends_on:
      #- "kafka"
 
 
  humidity-producer:
    build: 
      context: .
      dockerfile: ./iot-sensor-producer/humidity-producer.df
    container_name: humidity-producer
    depends_on:
      - "kafka"
 
 
  pressure-producer:
    build: 
      context: .
      dockerfile: ./iot-sensor-producer/pressure-producer.df
    container_name: pressure-producer
    depends_on:
      - "kafka"
   
   
  rain-producer:
    build: 
      context: .
      dockerfile: ./iot-sensor-producer/rain-producer.df
    container_name: rain-producer
    depends_on:
      - "kafka"
  
  
  solar-producer:
    build: 
      context: .
      dockerfile: ./iot-sensor-producer/solar-producer.df
    container_name: solar-producer
    depends_on:
      - "kafka"
  
  
  soil-temperature-producer:
    build: 
      context: .
      dockerfile: ./iot-sensor-producer/soil-temperature-producer.df
    container_name: soil-temperature-producer
    depends_on:
      - "kafka"
  
  
  soil-water-producer:
    build: 
      context: .
      dockerfile: ./iot-sensor-producer/soil-water-producer.df
    container_name: soil-water-producer
    depends_on:
      - "kafka"
  
  
  temperature-producer:
    build: 
      context: .
      dockerfile: ./iot-sensor-producer/temperature-producer.df
    container_name: temperature-producer
    depends_on:
      - "kafka"
  
  
  wind-producer:
    build: 
      context: .
      dockerfile: ./iot-sensor-producer/wind-producer.df
    container_name: wind-producer
    depends_on:
      - "kafka"

  #This commented service has only testing purposes
  #dummy-consumer:
    #build: 
      #context: .
      #dockerfile: ./iot-consumer/dummy-consumer.df
    #container_name: dummy-consumer
    #ports:
      #- "8082:8080"
      #- "8022:8020"
      #- "50009:50010"
    #environment:
      #- INIT_DAEMON_STEP=setup_spark
    #depends_on:
      #- "kafka"
      #- "influx"
    #restart: on-failure
    
    
  consumer:
    build: 
      context: .
      dockerfile: ./iot-consumer/consumer.df
    ports:
      - "8280-8285:8080"
      - "8120-8125:8020"
      - "50010-50015:50010"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    depends_on:
      - "kafka"
      - "influx"
    restart: on-failure
      

  influx:
    image: influxdb:1.8
    container_name: influx
    ports:
     - "8083:8083"
     - "8086:8086"
    environment:
     - INFLUXDB_USER=user
     - INFLUXDB_USER_PASSWORD=password
     - INFLUXDB_ADMIN_ENABLED=true
     - INFLUXDB_ADMIN_USER=root
     - INFLUXDB_ADMIN_PASSWORD=password
     - INFLUXDB_DB=pantheon
    volumes:
     - "./disk/influxdb_data:/var/lib/influxdb"
    restart: always
     

  grafana:
    image: grafana/grafana
    volumes:
      - ./disk/grafana_data:/etc/grafana/provisioning/
    ports:
     - "3000:3000"
    depends_on:
     - influx
    restart: always

